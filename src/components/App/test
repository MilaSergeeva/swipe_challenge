import React, { useState, useEffect, useRef } from "react";
import { baseUrl, checkResponse } from "../../utils/api";
import appStyles from "./App.module.css";

import { Rings } from "react-loader-spinner";
import { useDrop } from "react-dnd";
import CardsDeck from "../CardsDeck/CardsDeck";
import ArrowLeft from "../Controllers/ArrowLeft/ArrowLeft";
import ArrowRight from "../Controllers/ArrowRight/ArrowRight";
import DislikeBtn from "../Controllers/DislikeBtn/DislikeBtn";
import LikeBtn from "../Controllers/LikeBtn/LikeBtn";
import Logo from "../Logo/Logo";

//get cards from API
//show deck of cards
//add functionality to the swipe(arrow) buttons
//add functionality to like and dislike buttons
//like and dislike on drag and drop

function App() {
  const [cards, setCards] = useState({
    isLoading: false,
    hasError: false,
    data: [],
  });

  const [likedCards, setLikedCards] = useState([]);
  const [dislikedCards, setDislikedCards] = useState([]);
  const [active, setActive] = useState(false);
  const [currentCard, setCurrentCard] = useState({});
  const [currentCardRef, setCurrentCardRef] = useState({});

  const handleCardsToRight = () => {
    let lastCard = cards.data[cards.data.length - 1];
    const newOrderOfCards = cards.data.slice(0, -1);

    newOrderOfCards.unshift(lastCard);
    setCards({ ...cards, data: newOrderOfCards });
  };

  const handleCardsToLeft = () => {
    let array = cards.data;
    let firstCard = array.shift();

    array.push(firstCard);
    setCards({ ...cards, data: array });
  };

  const handleCardChoice = (cardId, choice) => {
    let chosenCard = cards.data.find((item) => item.id === cardId);

    if (choice === "like") {
      likedCards.length > 1
        ? setLikedCards([...likedCards, chosenCard])
        : setLikedCards([chosenCard]);
    } else {
      dislikedCards.length > 1
        ? setDislikedCards([...dislikedCards, chosenCard])
        : setDislikedCards([chosenCard]);
    }

    setCards({
      ...cards,
      data: cards.data.filter((item) => item.id !== cardId),
    });
  };

  const handleLikeClick = () => {
    currentCardRef.value.current.classList.add(appStyles.slideRight);

    setTimeout(() => {
      handleCardChoice(currentCard.id, "like");
    }, 400);
  };

  const handleDislikeClick = () => {
    currentCardRef.value.current.classList.add(appStyles.slideLeft);

    setTimeout(() => {
      handleCardChoice(currentCard.id, "dislike");
    }, 400);
  };

  useEffect(() => {
    if (cards.data.length > 0) {
      setActive(true);
      setCurrentCard(cards.data[0]);
    } else {
      setActive(false);
    }
  }, [cards]);

  useEffect(() => {
    fetch(baseUrl)
      .then(setCards({ ...cards, isLoading: true }))
      .then(checkResponse)
      .then((res) => {
        if (res) {
          setCards({ ...cards, isLoading: false, data: res });
        } else {
          setCards({ ...cards, isLoading: false, hasError: true });
        }
      })
      .catch((err) => {
        console.log(err); // show error
      });
  }, []);

  const [{ isOverOnLike }, dropOnLikeRef] = useDrop({
    accept: "cards",
    drop(item) {
      handleCardChoice(item.id, "like");
    },
    collect: (monitor) => {
      return {
        isOverOnLike: monitor.isOver(),
        canDrop: monitor.canDrop(),
      };
    },
  });

  const [{ isOverOnDislike }, dropOnDislikeRef] = useDrop({
    accept: "cards",
    drop(item) {
      handleCardChoice(item.id, "dislike");
    },
    collect: (monitor) => {
      return {
        isOverOnDislike: monitor.isOver(),
        canDrop: monitor.canDrop(),
      };
    },
  });

 

  return (
    <div className={appStyles.mainSection}>
      <Logo />
      <div
        className={`${appStyles.btnConatainier} ${
          appStyles.btnConatainierLeft
        } ${isOverOnDislike && appStyles.btnConatainierLeftOnDrop}`}
        ref={dropOnDislikeRef}
      >
        <DislikeBtn onClick={handleDislikeClick} active={active} />
      </div>
      <ArrowLeft onClick={handleCardsToLeft} active={active} />
      {cards.isLoading ? (
        <div className={appStyles.loaderCortainier}>
          <Rings
            height="100"
            width="100"
            color="#fff"
            radius="10"
            wrapperStyle={{}}
            wrapperClass=""
            visible={true}
            ariaLabel="rings-loading"
          />{" "}
        </div>
      ) : (
        // https://codyhouse.co/tutorials/how-stacking-cards that would be cool
        <CardsDeck
          cards={cards}
          setCurrentCardRef={(value) => {
            setCurrentCardRef({ value });
          }}
        />
      )}

      <ArrowRight onClick={handleCardsToRight} active={active} />

      <div
        className={`${appStyles.btnConatainier}  ${
          appStyles.btnConatainierRight
        } ${isOverOnLike && appStyles.btnConatainierRightOnDrop}`}
        ref={dropOnLikeRef}
      >
        <LikeBtn onClick={handleLikeClick} active={active} />
      </div>
    </div>
  );
}

export default App;





.mainSection {
  height: 100vh;
  width: 100vw;
  max-width: 1440px;
  margin-left: auto;
  margin-right: auto;
  position: relative;
  display: flex;
  flex-direction: row;
  align-items: center;
  justify-content: center;
}

.logo {
  position: absolute;
  top: 63px;
  left: 75px;
}

.loaderCortainier {
  height: 359px;
  width: 245px;
  margin-left: 203px;
  margin-right: 192px;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}

.cardsDeck{
  height: 359px;
  width: 245px;
  position: relative;
  display: block;
  margin-left: 203px;
  margin-right: 192px;
}

.card{
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  position: absolute;
  height: 306.04px;
  width: 182.64px;
  border: solid #fff 4.94px;
  border-radius: 29.62px;
  background-color: #0336FF;
  font-size: 36px;
  color: #fff;
  font-style: normal;
  font-weight: 400;
  line-height: 1.2;
  box-sizing: border-box;
}

.slideRight {
  animation: slideRight .5s ease-in 1 ;               
}

.slideLeft {
  animation: slideLeft .5s ease-in 1 ;               
}

@keyframes slideRight {
  to {
    left: 150%;
    opacity: 0;
  }
}

@keyframes slideLeft {
  to {
    left: -150%;
    opacity: 0;
  }
}

.arrowL {
  background: url(../../images/arrow-left.svg);
  padding: 3px;
  margin-left: 97px;
}

.arrowR {
  background: url(../../images/arrow-right.svg);
  margin-right: 96.5px;
}

.arrow {
  width: 30px;
  height: 20px;
  background-repeat: no-repeat;
  background-position: center;
}

.btnConatainier {
  display: flex;
  flex: 1 0 10vw;
  align-items: center;
  height: 100vh;
}

.btnConatainierLeft {
  justify-content: end;
}

.btnConatainierRight {
  justify-content: start;
}

.btnConatainierRightOnDrop {
  background: rgb(238,238,238);
  background: linear-gradient(94deg, rgba(238,238,238,0) 44%, rgba(11,169,202,1) 83%); 
}

.btnConatainierLeftOnDrop {
  background: rgb(11,169,202);
  background: linear-gradient(87deg, rgba(11,169,202,1) 16%, rgba(238,238,238,0) 56%);
}

.choiceBtn {
  width: 24px;
  height: 24px;
  background-repeat: no-repeat;
  background-position: center;
}

.dislikeBtn {
  background: url(../../images/thumb-down.png);
}

.likeBtn {
  background: url(../../images/thumb-up.png);
}

.arrowR:hover, .arrowL:hover, .dislikeBtn:hover, .likeBtn:hover {
  transform: scale(1.2);
  transition: all 0.3s linear 0s;
}

.disabled {
  opacity: 0.2;
}

@media only screen and (max-width: 1420px) {
  .cardsDeck, .loaderCortainier{
  margin-left: 14.1vw;
  margin-right: 13.3vw;
  }

  .arrowL{
    margin-left: 6.2vw;
  }
  .arrowR{
    margin-right: 6.5vw;
  }

  .BtnConatainierLeft,.BtnConatainierRight{
    width: 7.5vw;
  }
}

@media only screen and (max-width: 600px) {
  .logo {
    top: 20px;
    left: 20px;
  }

  .cardsDeck, .loaderCortainier{
    margin-left: 2.3vw;
    margin-right: 2.5vw;
    height: 246.23px;
    width: 161.36px;
  }

  .card{
    height: 210.47px;
    width: 125.6px;
    border: solid #fff 3.39px;
    border-radius: 20.37px;
    font-size: 24.7574px;
    line-height: 1.17;
  }
}